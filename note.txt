https://docs.google.com/document/d/1HpHURMszUU-RTSa0XwWlKDRu7fIKBVaL5qtMcHLUPkY/edit?tab=t.0













"use client";
import React, { useState, useEffect } from "react";
import { Menu, X, ChevronDown } from "lucide-react";
import Image from "next/image";
import { FaCartPlus } from "react-icons/fa";
import { IoSearch, IoCallOutline } from "react-icons/io5";
import Link from "next/link";

const Navbar = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [openDropdown, setOpenDropdown] = useState(null);
  const [isClient, setIsClient] = useState(false);

  const navItems = [
    {
      name: "Home",
      href: "/home-one",
      hasDropdown: true,
      dropdownItems: [
        { name: "Home 1", href: "/home-one" },
        { name: "Home 2", href: "/home-two" },
        { name: "Home 3", href: "/home-three" },
      ],
    },
    { name: "Menu", href: "/menu", hasDropdown: false },
    {
      name: "Order",
      href: "/order",
      hasDropdown: true,
      dropdownItems: [
        { name: "Dine-in", href: "/dine-in" },
        { name: "Online Order", href: "/onlineOrder" },
      ],
    },
    { name: "Catering", href: "/catering", hasDropdown: false },
    { name: "Contact", href: "/contact", hasDropdown: false },
  ];

  useEffect(() => {
    setIsClient(true);
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen);
  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
    setOpenDropdown(null);
  };
  const toggleDropdown = (name) =>
    setOpenDropdown(openDropdown === name ? null : name);

  return (
    <>
      <nav
        className={`sticky top-0 z-50 transition-all duration-300 backdrop-blur-md ${
          isClient && isScrolled
            ? "bg-white/70 shadow-lg"
            : "bg-white shadow-sm"
        }`}
      >
        <div className="px-4 sm:px-6 md:px-10 xl:px-20 h-24 flex items-center justify-between">
          {/* Logo */}
          <div className="flex items-center gap-6">
            <Link href="/">
              <Image
                src="/logoo.png"
                width={200}
                height={200}
                alt="Logo"
                className="w-28 h-auto sm:w-32 md:w-56"
              />
            </Link>
          </div>

          {/* Desktop Menu */}
          <div className="hidden lg:flex items-center gap-12">
            {navItems.map((item) => (
              <div key={item.name} className="relative group">
                <Link
                  href={item.href}
                  className="flex items-center gap-1 text-black font-semibold hover:text-red-500 transition-colors duration-200  font-barlow  leading-tight text-lg"
                >
                  {item.name}
                  {item.hasDropdown && (
                    <ChevronDown className="h-4 w-4 group-hover:rotate-180 transition-transform duration-300" />
                  )}
                </Link>

                {item.hasDropdown && item.dropdownItems && (
                  <div className="absolute left-0 mt-2 w-56 bg-white rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform translate-y-2 group-hover:translate-y-0 z-50">
                    <div className="py-2">
                      {item.dropdownItems.map((subItem) => (
                        <Link
                          key={subItem.name}
                          href={subItem.href}
                          className="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-red-500 transition-colors duration-200"
                        >
                          {subItem.name}
                        </Link>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Desktop CTA */}
          <div className="hidden lg:flex items-center gap-6">
            <div className="flex items-center md:hidden xl:flex gap-3">
              <IoCallOutline className="text-black text-xl" />
              <p className="text-black text-sm md:text-base">+880 123 456 88</p>
            </div>

                          <Link href='/onlineOrder' className="bg-red-600 hover:cursor-pointer hover:bg-red-700 text-white font-bold py-4 px-8 rounded-none uppercase tracking-wide text-sm transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1">
                Order Now
              </Link>
          </div>

          {/* Mobile Toggle */}
          <div className="lg:hidden">
            <button
              onClick={toggleMobileMenu}
              className="p-2 rounded-md text-black hover:text-red-500 focus:outline-none focus:ring-2 focus:ring-red-500 transition"
            >
              {isMobileMenuOpen ? (
                <X className="w-6 h-6" />
              ) : (
                <Menu className="w-6 h-6" />
              )}
            </button>
          </div>
        </div>
      </nav>

      {/* Mobile Sidebar */}
      <div
        className={`fixed top-0 left-0 h-full w-64 bg-black shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out ${
          isMobileMenuOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="flex items-center justify-between p-4 border-b">
          <Link href="/">
            <Image
              src="/logoo.png"
              width={190}
              height={180}
              alt="Logo"
              className=" h-auto w-36"
            />
          </Link>
          <button
            onClick={closeMobileMenu}
            className="text-gray-700 hover:text-red-500"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Menu Items */}
        <div className="flex flex-col mt-4 px-4 gap-2">
          {navItems.map((item, index) => (
            <div key={item.name} className="flex flex-col">
              <button
                onClick={() =>
                  item.hasDropdown
                    ? toggleDropdown(item.name)
                    : closeMobileMenu()
                }
                className="flex items-center justify-between w-full px-3 py-2 text-gray-700 hover:text-red-500 hover:bg-gray-100 rounded-md transition-all duration-200"
              >
                {item.name}
                {item.hasDropdown && (
                  <ChevronDown
                    className={`w-4 h-4 transition-transform ${
                      openDropdown === item.name ? "rotate-180" : ""
                    }`}
                  />
                )}
              </button>

              {item.hasDropdown && openDropdown === item.name && (
                <div className="flex flex-col ml-4 mt-1 gap-1">
                  {item.dropdownItems.map((sub) => (
                    <Link
                      key={sub.name}
                      href={sub.href}
                      className="px-3 py-2 text-gray-600 hover:text-red-500 hover:bg-gray-100 rounded-md transition-colors"
                      onClick={closeMobileMenu}
                    >
                      {sub.name}
                    </Link>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Mobile CTA */}
        <div className="mt-auto p-4 border-t">
          <Link
            href="/dine-in"
            className="block w-full text-center bg-red-500 hover:bg-red-600 text-black py-3 rounded-md font-semibold transition-all duration-200"
            onClick={closeMobileMenu}
          >
            Book Table
          </Link>
        </div>
      </div>

      {/* Overlay */}
      <div
        className={`fixed inset-0 bg-black/50 z-[9998] transition-opacity duration-300 ${
          isMobileMenuOpen ? "opacity-100 visible" : "opacity-0 invisible"
        }`}
        onClick={closeMobileMenu}
      ></div>
    </>
  );
};

export default Navbar;
